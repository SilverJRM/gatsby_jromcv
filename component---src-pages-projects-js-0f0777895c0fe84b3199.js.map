{"version":3,"file":"component---src-pages-projects-js-0f0777895c0fe84b3199.js","mappings":"sKAyLA,UArLkB,WAAH,OACbA,EAAAA,cAACC,EAAAA,EAAM,KACLD,EAAAA,cAAA,WAASE,GAAG,QACVF,EAAAA,cAAA,cACEA,EAAAA,cAAA,UAAI,YACJA,EAAAA,cAAA,SAAG,oBAELA,EAAAA,cAAA,WAASG,UAAU,kBACjBH,EAAAA,cAAA,OAAKG,UAAU,SACbH,EAAAA,cAAA,eACEA,EAAAA,cAAA,cACEA,EAAAA,cAAA,UAAI,uBACJA,EAAAA,cAAA,SAAG,iBAELA,EAAAA,cAAA,SAAG,8MAMHA,EAAAA,cAAA,SACEA,EAAAA,cAAA,cAAQ,cACRA,EAAAA,cAAA,KAAGI,KAAK,+BAA8B,oBACtCJ,EAAAA,cAAA,WACAA,EAAAA,cAAA,cAAQ,qBAA0B,uBAEpCA,EAAAA,cAAA,WACAA,EAAAA,cAAA,cACEA,EAAAA,cAAA,UAAI,6BACJA,EAAAA,cAAA,SAAG,iBAELA,EAAAA,cAAA,SAAG,kWAQHA,EAAAA,cAAA,SACEA,EAAAA,cAAA,cAAQ,cACRA,EAAAA,cAAA,KAAGI,KAAK,yBAAwB,WAChCJ,EAAAA,cAAA,WACAA,EAAAA,cAAA,cAAQ,qBAA0B,4CAGpCA,EAAAA,cAAA,WACAA,EAAAA,cAAA,cACEA,EAAAA,cAAA,UAAI,cACJA,EAAAA,cAAA,SAAG,iBAELA,EAAAA,cAAA,SAAG,sXAQHA,EAAAA,cAAA,SACEA,EAAAA,cAAA,cAAQ,cACRA,EAAAA,cAAA,KAAGI,KAAK,2BAA0B,kBAClCJ,EAAAA,cAAA,WACAA,EAAAA,cAAA,cAAQ,qBAA0B,4CAGpCA,EAAAA,cAAA,WACAA,EAAAA,cAAA,cACEA,EAAAA,cAAA,UAAI,WACJA,EAAAA,cAAA,SAAG,iBAELA,EAAAA,cAAA,SAAG,gfAUHA,EAAAA,cAAA,SACEA,EAAAA,cAAA,cAAQ,cACRA,EAAAA,cAAA,KAAGI,KAAK,4BAA2B,oBACnCJ,EAAAA,cAAA,WACAA,EAAAA,cAAA,cAAQ,qBAA0B,4CAGpCA,EAAAA,cAAA,WACAA,EAAAA,cAAA,cACEA,EAAAA,cAAA,UAAI,6BACJA,EAAAA,cAAA,SAAG,uBAELA,EAAAA,cAAA,SAAG,0YASHA,EAAAA,cAAA,SACEA,EAAAA,cAAA,cAAQ,YACRA,EAAAA,cAAA,KAAGI,KAAK,oDAAmD,2BAG3DJ,EAAAA,cAAA,WACAA,EAAAA,cAAA,cAAQ,qBAA0B,WAEpCA,EAAAA,cAAA,WACAA,EAAAA,cAAA,cACEA,EAAAA,cAAA,UAAI,0BACJA,EAAAA,cAAA,SAAG,+BAELA,EAAAA,cAAA,SAAG,6eAUHA,EAAAA,cAAA,SACEA,EAAAA,cAAA,cAAQ,qBAA0B,gCAEpCA,EAAAA,cAAA,WACAA,EAAAA,cAAA,cACEA,EAAAA,cAAA,UAAI,yBACJA,EAAAA,cAAA,SAAG,0DAELA,EAAAA,cAAA,SAAG,4KAKHA,EAAAA,cAAA,SACEA,EAAAA,cAAA,cAAQ,qBAA0B,qCAGpCA,EAAAA,cAAA,WACAA,EAAAA,cAAA,cACEA,EAAAA,cAAA,UAAI,yBACJA,EAAAA,cAAA,SAAG,+DAELA,EAAAA,cAAA,SAAG,2VAQHA,EAAAA,cAAA,SACEA,EAAAA,cAAA,cAAQ,qBAA0B,4CAGpCA,EAAAA,cAAA,WACAA,EAAAA,cAAA,cACEA,EAAAA,cAAA,UAAI,yBACJA,EAAAA,cAAA,SAAG,mCAELA,EAAAA,cAAA,SAAG,kPAMHA,EAAAA,cAAA,SACEA,EAAAA,cAAA,cAAQ,qBAA0B,qDAOrC,C","sources":["webpack://gatsby-starter-spectral/./src/pages/Projects.js"],"sourcesContent":["import React from 'react';\r\n\r\nimport Layout from '../components/Layout';\r\n\r\nconst IndexPage = () => (\r\n  <Layout>\r\n    <article id=\"main\">\r\n      <header>\r\n        <h2>Projects</h2>\r\n        <p>recent projects</p>\r\n      </header>\r\n      <section className=\"wrapper style5\">\r\n        <div className=\"inner\">\r\n          <section>\r\n            <header>\r\n              <h4>Remote Music Player</h4>\r\n              <p>Telegram BOT</p>\r\n            </header>\r\n            <p>\r\n              This Telegram bot enables users to play or stop music on a remote\r\n              computer through Telegram messages. It includes a user validation\r\n              system to ensure that only authorized users can perform these\r\n              actions.\r\n            </p>\r\n            <p>\r\n              <strong>Bot Link: </strong>\r\n              <a href=\"https://t.me/jmusicplay_bot\">Remote MusicPlay</a>\r\n              <br />\r\n              <strong>Technology Stack:</strong> JavaScript, Nodejs\r\n            </p>\r\n            <hr />\r\n            <header>\r\n              <h4>Rock Paper Scissors [rps]</h4>\r\n              <p>Telegram BOT</p>\r\n            </header>\r\n            <p>\r\n              This bot is a Telegram bot that allows users to play the game of\r\n              Rock Paper Scissors. It provides commands such as starting a game,\r\n              joining a game, exiting a game, and viewing leaderboards. Users\r\n              can also create private games and invite friends to play. The bot\r\n              keeps track of game sessions and scores, determining the winner\r\n              based on player choices.\r\n            </p>\r\n            <p>\r\n              <strong>Bot Link: </strong>\r\n              <a href=\"https://t.me/jRPS_bot\">RPS BOT</a>\r\n              <br />\r\n              <strong>Technology Stack:</strong> JavaScript, Express, Nodejs,\r\n              PostGreSQL\r\n            </p>\r\n            <hr />\r\n            <header>\r\n              <h4>IdeaLogger</h4>\r\n              <p>Telegram BOT</p>\r\n            </header>\r\n            <p>\r\n              This bot, called the Idea Logger BOT, is designed to help users\r\n              log their ideas and thoughts every day. It offers commands such as\r\n              adding health, business, and general ideas, retrieving idea types,\r\n              and providing a guide on how to use the bot. Users can easily\r\n              interact with the bot through Telegram, making it convenient to\r\n              record and access their ideas whenever needed.\r\n            </p>\r\n            <p>\r\n              <strong>Bot Link: </strong>\r\n              <a href=\"https://t.me/iLoggerBOT\">IdeaLogger BOT</a>\r\n              <br />\r\n              <strong>Technology Stack:</strong> JavaScript, Express, Nodejs,\r\n              PostGreSQL\r\n            </p>\r\n            <hr />\r\n            <header>\r\n              <h4>TaskBot</h4>\r\n              <p>Telegram BOT</p>\r\n            </header>\r\n            <p>\r\n              Developed a Telegram bot that automates the creation of a daily\r\n              \"to do\" list. The bot, named \"@JRM_TaskBOT\", utilizes the\r\n              JavaScript language, along with the Express web framework and\r\n              Node.js runtime environment. To store and retrieve task records, I\r\n              incorporated PostGreSQL and developed custom APIs for seamless\r\n              interaction with the database. This project exemplified the\r\n              effective utilization of technology to create a user-friendly and\r\n              efficient task management solution through Telegram.\r\n            </p>\r\n            <p>\r\n              <strong>Bot Link: </strong>\r\n              <a href=\"https://t.me/JRM_TaskBOT\">telegram taskbot</a>\r\n              <br />\r\n              <strong>Technology Stack:</strong> JavaScript, Express, Nodejs,\r\n              PostGreSQL\r\n            </p>\r\n            <hr />\r\n            <header>\r\n              <h4>Python Binance Automation</h4>\r\n              <p>Trading Automation</p>\r\n            </header>\r\n            <p>\r\n              Developed an automation script designed to read data from a\r\n              spreadsheet file and execute automated trades based on the\r\n              specified details. The script facilitated seamless integration\r\n              with the Binance platform, enabling efficient and accurate trade\r\n              execution. The project, hosted on GitHub and showcased the\r\n              utilization of Python to create a powerful and flexible trading\r\n              automation solution.\r\n            </p>\r\n            <p>\r\n              <strong>Github: </strong>\r\n              <a href=\"https://github.com/SilverJRM/PyBOT_BinanceSignal\">\r\n                Python Trade Automation\r\n              </a>\r\n              <br />\r\n              <strong>Technology Stack:</strong> Python\r\n            </p>\r\n            <hr />\r\n            <header>\r\n              <h4>Python File Automation</h4>\r\n              <p>File Validation Automation</p>\r\n            </header>\r\n            <p>\r\n              Implemented a batch process for automated file validation,\r\n              specifically targeting Excel files stored in a SharePoint\r\n              location. The process involved performing comprehensive validation\r\n              checks on the files, generating a detailed report using MS Teams,\r\n              and subsequently moving the files to a designated target location\r\n              based on the validation results. The solution was built utilizing\r\n              Python, Jenkins, and SharePoint, ensuring efficient and reliable\r\n              automation of the file validation process.\r\n            </p>\r\n            <p>\r\n              <strong>Technology Stack:</strong> Python, Jenkins, SharePoint\r\n            </p>\r\n            <hr />\r\n            <header>\r\n              <h4>File Upload Interface</h4>\r\n              <p>Web-based React User Interface with Expanded Features</p>\r\n            </header>\r\n            <p>\r\n              Revamp the existing user interface built with React by introducing\r\n              advanced functionalities such as interactive charts, customizable\r\n              widgets, and comprehensive reports.\r\n            </p>\r\n            <p>\r\n              <strong>Technology Stack:</strong> JavaScript, React, Redux,\r\n              Nodejs\r\n            </p>\r\n            <hr />\r\n            <header>\r\n              <h4>AUTOMATED TRADING BOT</h4>\r\n              <p>Algorithmic Trading System Utilizing Chainlink and Binance</p>\r\n            </header>\r\n            <p>\r\n              developed a trading algorithm that leveraged real-time price data\r\n              from cryptocurrency assets via Chainlink, enabling informed\r\n              decisions on trade initiation and closure on the Binance platform.\r\n              The system was developed using JavaScript, Node.js, Express, and\r\n              PostGreSQL for efficient tracking of asset prices and trades\r\n              through API integration.\r\n            </p>\r\n            <p>\r\n              <strong>Technology Stack:</strong> JavaScript, Nodejs, Express,\r\n              PostGreSQL\r\n            </p>\r\n            <hr />\r\n            <header>\r\n              <h4>Smartcontract Lottery</h4>\r\n              <p>Ethereum Smartcontract Lottery</p>\r\n            </header>\r\n            <p>\r\n              Developed an Ethereum smart contract lottery, utilizing\r\n              JavaScript, Solidity, Hardhat Framework, and CSS. The project\r\n              involved creating a lottery system using a smart contract,\r\n              enabling secure and transparent participation in the lottery.\r\n            </p>\r\n            <p>\r\n              <strong>Technology Stack:</strong> JavaScript, Solidity, Hardhat\r\n              Framework, CSS\r\n            </p>\r\n          </section>\r\n        </div>\r\n      </section>\r\n    </article>\r\n  </Layout>\r\n);\r\n\r\nexport default IndexPage;\r\n"],"names":["React","Layout","id","className","href"],"sourceRoot":""}